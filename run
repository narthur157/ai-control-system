#!/bin/bash

# This is a convenience script to do things with the NXT
# It does not concern itself with the neural network beyond formatting
# data for training

# fancy argument options
# note that you shouldn't pass -n and -d

function format {
	# parse the most recent test, the one we just made
	# these two files should probably be combined
	python dataparser.py testRuns/`ls -t testRuns/ | head -1` &&
	java -cp server-pc/bin/ formatting/RebalanceData &&
	echo "Files ready for training, use runTrain in $ANN_FOLDER after deleting the weights file"
}

ANN_FOLDER=LightSpeedANN

if [[ $# -eq 0 ]]
	then
		echo "usage: -f or --format to format the result of test runs for training"
		echo "-n or --neural to run a neural motor test"
		echo "-d or --datacollect to collect training data"
		echo "either -n or -d is required."
		exit 1
fi

while [[ $# > 0 ]]
do
key="$1"

case $key in
    -f|--format)
	FORMAT=1
    ;;
    -n|--neural)
	TEST=neural
    TESTS="$2"
    shift # past argument
    ;;
    -p|--pid)
	TEST=pid
    TESTS="$2"
    shift # past argument
    ;;
    -d|--datacollect)
	TEST=data
    TESTS="$2"
    shift # past argument
    ;;
    *)
    echo "Invalid Argument"
	exit 1        # unknown option
    ;;
esac
shift # past argument or value
done

if [[ -z $TEST ]]; then
	if [[ $FORMAT ]]; then
		format
		exit 0
	else
		echo $TEST
		echo "Invalid arguments, please use --neural or --data"
		exit 1
	fi

fi

if [[ -z $TESTS ]]
	then 
		echo "Invalid arguments, please specify number of tests, ie -n 10"
		exit 1
fi

# this will only create the dir if not already there
mkdir -p testRuns &&
# load program onto the brick
nxj -r client.Receive -cp client-brick/bin/ 

if [[ $? -ne 0 ]]
	then
		echo "USB connection failed, retrying in 7 seconds..."
		sleep 7
		nxj -r client.Receive -cp client-brick/bin/ 
		if [[ $? -ne 0 ]]
			then
				echo "USB connection failed again, please plug-in NXT and hit enter"
				read null
				sleep 3
				# if it's not plugged in now just quit. There's no hope at this point
				nxj -r client.Receive -cp client-brick/bin/ || exit 1
		fi
fi

if [[ $? -eq 0 ]]; then	
	if [[ $TEST == "neural" ]]; then
		cd LightSpeedANN
		./eval &
		PID=$!
		cd ..
	fi
	# run our server program
	nxjpc -cp server-pc/bin/ server.Send $TEST $TESTS
	
	if [[ -n $PID ]]; then
		kill $PID
	fi
fi

# $? is the exit code from last script
if [[ $? -eq 0 && $FORMAT ]]; then
	format
fi

